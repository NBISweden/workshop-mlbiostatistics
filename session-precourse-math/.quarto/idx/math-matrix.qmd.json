{"title":"Matrices","markdown":{"headingText":"Matrices","containsRefs":false,"markdown":"\n**Aims**\n\n- to introduce matrix and basic matrices operations\n\n**Learning outcomes**\n\n- to be able to write matrices using matrix notations\n- to be able to perform simple matrix operations such as adding and multiplication\n- to be able to find the reverse of the 2-dimensional matrix\n\n## Matrix\nA matrix is a rectangular array of numbers e.g. \n\n$$\\mathbf{A}=\\begin{bmatrix}\n  x_{11} & x_{12} & x_{13} & \\dots & x_{1n} \\\\\n  x_{21} & x_{22} & x_{23} & \\dots & x_{2n} \\\\\n  \\dots & \\dots & \\dots& \\dots & \\dots\\\\\n  x_{m1} & x_{m2} & x_{1m3} & \\dots & x_{mn} \\\\\n\\end{bmatrix}$$\n\nwhere:\n\n- the notional subscripts in the typical element $x_{ij}$ refers to its row and column location in the array, e.g. $x_{12}$ refers to element in the first row and second column\n- we say that matrix has $m$ rows and $n$ columns and the **dimension** of a matrix is defined as $m \\times n$\n- a matrix can be viewed as a set of column vectors or a set of row vectors\n- a vector can be viewed as a matrix with only one column or with only one row\n\n## Special matrices\n- A matrix with the same number of rows as columns, $m = n$, is said to be a **square matrix**\n- A matrix that is not squared, $m \\neq n$ is called **rectangular matrix**\n- A **null matrix** is composed of all 0\n- An **identity matrix**, denoted as $\\mathbf{I}$ or $\\mathbf{I_n}$, is a square matrix with 1's on the main diagonal and all other elements equal to 0, e.g. a three-dimensional identity matrix is $$\\mathbf{I}=\\begin{bmatrix}\n  1 & 0 & 0  \\\\\n  0 & 1 & 0  \\\\\n  0 & 0 & 1\n\\end{bmatrix}$$\n- A square matrix is said to be **symmetric** if $x_{ij} = x_{ji}$ e.g. \n$$\\mathbf{A}=\\begin{bmatrix}\n  1 & 4 & 2  \\\\\n  4 & 1 & 0  \\\\\n  2 & 0 & 1\n\\end{bmatrix}$$\n- A **diagonal matrix** is a square matrix whose non-diagonal entries are all zero, that is $x_{ij} = 0$ for $i \\neq j$, e.g. \n$$\\mathbf{A}=\\begin{bmatrix}\n  1 & 0 & 0  \\\\\n  0 & 2 & 0  \\\\\n  0 & 0 & 3\n\\end{bmatrix}$$\n- An **upper-triangular matrix** is a square matrix in which all entries below the diagonal are 0, that is $x_{ij}=0$ for $i>j$ e.g. \n$$\\mathbf{A}=\\begin{bmatrix}\n  1 & 3 & 4  \\\\\n  0 & 2 & 5  \\\\\n  0 & 0 & 3\n\\end{bmatrix}$$\n- A **lower-triangular matrix** is a square matrix in which all entries above the diagonal are 0, that is hat is $x_{ij}=0$ for $i<j$ e.g. \n$$\\mathbf{A}=\\begin{bmatrix}\n  1 & 0 & 0  \\\\\n  1 & 1 & 0  \\\\\n  1 & 1 & 1\n\\end{bmatrix}$$\n\n## Matrix operations\n- matrix $\\mathbf{A} = \\mathbf{B}$ if both matrices have exactly the same dimension and if each element of $\\mathbf{A}$ equals to the corresponding element of e.g. $\\mathbf{A} = \\mathbf{B}$ if\n$\\mathbf{A}=\\begin{bmatrix}\n  1 & 3 & 4  \\\\\n  0 & 2 & 5  \\\\\n  0 & 0 & 3\n\\end{bmatrix}$ and $\\mathbf{B}=\\begin{bmatrix}\n  1 & 3 & 4  \\\\\n  0 & 2 & 5  \\\\\n  0 & 0 & 3\n\\end{bmatrix}$\n\n<br />\n\n- for any matrix $\\mathbf{A}$ the **transpose**, denoted by $\\mathbf{A}^\\top$ or $\\mathbf{A}^\\prime$, is obtained by interchanging rows and columns, e.g. given matrix $\\mathbf{A}=\\begin{bmatrix}\n  1 & 3 & 4  \\\\\n  0 & 2 & 5  \\\\\n  0 & 0 & 3\n\\end{bmatrix}$ we have $\\mathbf{A}^\\top=\\begin{bmatrix}\n  1 & 0 & 0  \\\\\n  3 & 2 & 0  \\\\\n  4 & 5 & 3\n\\end{bmatrix}$. The transpose of a transpose of a matrix yield the original matrix, $\\Big(\\mathbf{A}^\\top\\Big)^\\top = \\mathbf{A}$\n\n<br />\n\n- we can **add** two matrices if they have the same dimension, e.g. \n$$\\mathbf{A} + \\mathbf{B} = \\mathbf{A} =\\begin{bmatrix}\n  x_{11} & x_{12}   \\\\\n  x_{21} & x_{22} \n\\end{bmatrix} + \\begin{bmatrix}\n  y_{11} & y_{12}   \\\\\n  y_{21} & y_{22} \n\\end{bmatrix} = \\begin{bmatrix}\n  x_{11}+y_{11} & x_{12}+y_{12}   \\\\\n  x_{21}+y_{21} & x_{22}+y_{22} \n\\end{bmatrix}$$\n\n<br />\n\n- we can **multiply** a matrix by **a scalar** $\\delta$ e.g. $$\\delta \\cdot \\mathbf{A} = \\begin{bmatrix}\n  \\delta \\cdot x_{11} & \\delta \\cdot x_{12}   \\\\\n  \\delta \\cdot x_{21} & \\delta \\cdot x_{22} \n\\end{bmatrix}$$\n\n<br />\n\n- we can **multiply two matrices** if they are **conformable**, i.e. first matrix has the same number of columns as the number of rows in the second matrix. We then can write: \n$$\\mathbf{C} = \\mathbf{A} \\cdot \\mathbf{B}  = \\begin{bmatrix}\n  x_{11} & x_{12} & x_{13}  \\\\\n  x_{21} & x_{22} & x_{23}\n\\end{bmatrix} \\times \\begin{bmatrix}\n  y_{11} & y_{12}   \\\\\n  y_{21} & y_{22}  \\\\\n  y_{31} & y_{32}\n\\end{bmatrix} = \\\\\\ \n\\begin{bmatrix}\n  x_{11} \\cdot y_{11} + x_{12} \\cdot y_{21} + x_{13} \\cdot y_{31}  & x_{11} \\cdot y_{12} + x_{12} \\cdot y_{22} + x_{13} \\cdot y_{32}  \\\\\n  x_{21} \\cdot y_{11} + x_{22} \\cdot y_{21} + x_{23} \\cdot y_{31} & x_{21} \\cdot y_{12} + x_{22} \\cdot y_{22} + x_{23} \\cdot y_{32}\n\\end{bmatrix}$$\n\n## Inverse of a matrix \nFor a square matrix $\\mathbf{A}$ there may exist a matrix $\\mathbf{B}$ such that $\\mathbf{A} \\cdot \\mathbf{B} = \\mathbf{I}$. An **inverse**, if it exists, is denoted as $\\mathbf{A}^{-1}$ and we can rewrite the definition as $$\\mathbf{A} \\cdot \\mathbf{A}^{-1} = \\mathbf{I}$$ where $\\mathbf{I}$ is an identify matrix (equivalent to 1). There is no division for matrices, instead we can use inverse to multiply the matrix by an inverse, similar to when instead of dividing the number $a$ by $b$ we multiply $a$ by reciprocal of $b = \\frac{1}{b}$\n\nFor a 2-dimensional matrix we can follow the below formula for obtaining the inverse \n$$\\begin{bmatrix}\n  x_{11} & x_{12}   \\\\\n  x_{21} & x_{22} \n\\end{bmatrix}^{-1} = \\frac{1}{x_{11} \\cdot x_{22} - x_{12} \\cdot x_{21}} \\cdot \\begin{bmatrix}\n  x_{22} & -x_{12}   \\\\\n  -x_{21} & x_{11} \n\\end{bmatrix}$$\n\n<br />\n\n## Orthogonal matrix\n- A matrix $\\mathbf{A}$ for which $\\mathbf{A^\\top} = \\mathbf{A^{-1}}$ is true is said to be **orthogonal**\n\n## Exercises {-}\n\n::: {#exr-m-matrix}\n\nGiven matrices \n\n $\\mathbf{A} = \\begin{bmatrix}\n  1 & 2   \\\\\n  3 & 4\n  \\end{bmatrix}$, \n  $\\mathbf{B} = \\begin{bmatrix}\n  1 & 0   \\\\\n  0 & 1\n  \\end{bmatrix}$ and $\\mathbf{C} = \\begin{bmatrix}\n  1 & 0   \\\\\n  0 & 2\n  \\end{bmatrix}$\n\n\na) what is the dimension of matrix $\\mathbf{A}$?\nb) what is $\\mathbf{A}^\\top$?\nc) which of the matrices is i) a square matrix, ii) an identity matrix,  iii) null matrix, iv) diagonal matrix, v) a triangular matrix,? \nd) calculate $\\mathbf{A} + \\mathbf{B}$?\ne) calculate $\\mathbf{A} \\cdot \\mathbf{C}$?\nf) calculate $\\mathbf{B}^\\top$\ng) calculate $\\mathbf{A}^{-1}$\n<!-- h) calculate $(\\mathbf{A} + \\mathbf{B})^{-1}$ -->\n<!-- i) answer again a) - h) this time using R functions and/or commands -->\n\n:::\n\n::: {#exr-matrix-R}\n\nRepeat above calculations using R. \n\n:::\n\n\n## Answers{-}\n\n::: {.solution}\n@exr-m-matrix\n:::\n\na) $2 \\times 2$\nb) $\\mathbf{A}^\\top = \\begin{bmatrix}\n  1 & 3   \\\\\n  2 & 4\n  \\end{bmatrix}$\nc) i) a square matrix: $\\mathbf{A}$, $\\mathbf{B}$ and $\\mathbf{C}$, ii) identity matrix: $\\mathbf{B}$, iii) null matrix: none, iv) diagonal matrix: $\\mathbf{B}$ (identity matrix is diagonal) and $\\mathbf{C}$, v) triangular  $\\mathbf{B}$ and  $\\mathbf{C}$ as both identity matrix $\\mathbf{B}$ and diagonal matrix $\\mathbf{C}$ is triangular, both lower and upper triangular\nd) $\\mathbf{A} + \\mathbf{B} = \\begin{bmatrix}\n  1 & 2   \\\\\n  3 & 4\n  \\end{bmatrix} + \\begin{bmatrix}\n  1 & 0   \\\\\n  0 & 1\n  \\end{bmatrix} = \\begin{bmatrix}\n  2 & 2   \\\\\n  3 & 5\n  \\end{bmatrix}$\ne) $\\mathbf{A} \\cdot \\mathbf{C} = \\begin{bmatrix}\n  1 \\cdot 1 + 2 \\cdot 0 & 1 \\cdot 0 + 2 \\cdot 2   \\\\\n  3 \\cdot 1 + 4 \\cdot 0 & 3 \\cdot 0 + 4 \\cdot 2\n  \\end{bmatrix} = \\begin{bmatrix}\n  1 & 4   \\\\\n  3 & 8\n  \\end{bmatrix}$\nf) $\\mathbf{B}^\\top = \\begin{bmatrix}\n  1 & 0   \\\\\n  0 & 1\n  \\end{bmatrix}$\n  \ng) \n\n$$\\mathbf{A}^{-1} = \\begin{bmatrix}\n  1 & 2   \\\\\n  3 & 4 \n\\end{bmatrix}^{-1} = \\frac{1}{1 \\cdot 4 - 2 \\cdot 3} \\cdot \\begin{bmatrix}\n  4 & -2   \\\\\n  -3 & 1\n\\end{bmatrix} = -\\frac{1}{2} \\cdot \\begin{bmatrix}\n  4 & -2   \\\\\n  -3 & 1\n\\end{bmatrix} = \\begin{bmatrix}\n  -2 & 1   \\\\\n  \\frac{3}{2} & -\\frac{1}{2}\n\\end{bmatrix}$$\n\n<!-- h) calculate $(\\mathbf{A} + \\mathbf{B})^{-1}$ -->\n\n::: {.solution}\n@exr-matrix-R\n:::\n\n```{r}\n#| echo: true\n#| code-fold: false\n\n# define matrix A, B and C\nA <- matrix(c(1, 2, 3, 4), nrow = 2, byrow = TRUE)\nB <- matrix(c(1, 0, 0, 1), nrow = 2, byrow = TRUE)\nC <- matrix(c(1, 0, 0, 2), nrow = 2, byrow = TRUE)\n\n# a)\ndim(A)\n\n# b)\nt(A)\n\n# c) square matrix\n# to check if matrix is square we can compare number of rows and columns\nfunc_is_square <- function(x = A){\n  # function check if number of rows is equal to number of columns\n  # return TRUE is square, FALSE otherwise\n  is_square = TRUE\n  if (nrow(x) != ncol(x)){\n    is_square = FALSE\n  }\n  \n  return(is_square)\n}\n\nfunc_is_square(A); func_is_square(B); func_is_square(C)\n\n# c) identity matrix\n# 1. we need to check if matrix is square\n# 2. we need to check if there are only 1s on diagonal\n# 3. we need to check that non-diagonal elements are zero\n# we can write loop through elements of matrix and check \n# - if elements on diagonal are 1\n# - and if elements on non-diagonal are 0\n\nfunc_is_identity <- function(x){\n\n  is_identity <-  TRUE\n  \n  if (func_is_square(x) == TRUE){ # first check if square\n    \n    for(i in 1:nrow(x)){\n      for (j in 1:ncol(x)){\n        \n        if (i == j){ # check diagonal\n          if (x[i,j] != 1){\n            is_identity <- FALSE\n          }\n        }else{ # check non-diagonal\n          if (x[i,j] != 0){\n            is_identity <- FALSE\n          }\n        }\n      }\n    }\n    \n  }else{\n    is_identity <- FALSE\n  }\n  \n  return(is_identity)\n}\nfunc_is_identity(A); func_is_identity(B); func_is_identity(C)\n\n# c) null matrix\n# we need to check if all elements are equal to zero \nfunc_is_null <- function(x){\n  \n  is_null <- TRUE\n  \n  # see if any element is non-zero\n  if (any(x != 0)){ \n    is_null <- FALSE}\n  \n  return(is_null)  \n}\n\nfunc_is_null(A); func_is_null(B); func_is_null(C)\n\n# c) diagonal matrix\n# check if it is square\n# check if elements outside main diagonal are zero\nfunc_is_diag <- function(x){\n\n  is_diag <-  TRUE\n  \n  if (func_is_square(x) == TRUE){ # first check if square\n    \n    for(i in 1:nrow(x)){\n      for (j in 1:ncol(x)){\n        \n        if (i != j){ # check outside main diagonal\n          if (x[i,j] != 0){\n            is_diag <- FALSE\n          }\n        }\n      }\n    }  \n      \n  }else{\n    is_diag <- FALSE\n  }\n  \n  return(is_diag)\n}\n\nfunc_is_diag(A); func_is_diag(B); func_is_diag(C)\n\n# c) triangular\n# upper triangular: all entries below main diagonal are zero\n# lower triangular: all entries above main diagnoal are zero\nfunc_is_upper_tri <- function(x){\n  \n  is_upper <-  TRUE\n  \n  if (func_is_square(x) == TRUE){ # first check if square\n    \n    for(i in 1:nrow(x)){\n      for (j in 1:ncol(x)){\n        \n        if (i > j){ # check below the main diagonal\n          if (x[i,j] != 0){\n            is_upper <- FALSE\n          }\n        }\n      }\n    }  \n      \n  }else{\n    is_upper <- FALSE\n  }\n  return(is_upper)\n}\n\nfunc_is_lower_tri <- function(x){\n  \n  is_lower <-  TRUE\n  \n  if (func_is_square(x) == TRUE){ # first check if square\n    \n    for(i in 1:nrow(x)){\n      for (j in 1:ncol(x)){\n        \n        if (i < j){ # check below the main diagonal\n          if (x[i,j] != 0){\n            is_lower <- FALSE\n          }\n        }\n      }\n    }  \n      \n  }else{\n    is_lower <- FALSE\n  }\n  \n  return(is_lower)\n}\n\nfunc_is_upper_tri(A); func_is_upper_tri(B); func_is_upper_tri(C)\nfunc_is_lower_tri(A); func_is_lower_tri(B); func_is_lower_tri(C)\n\n# d) \nA + B\n\n# e)\nA %*% C\n\n# f)\nt(B)\n\n# g)\nsolve(A)\n```\n\n\n\n\n","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"engine":"knitr"},"render":{"keep-tex":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":true,"code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true,"format-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","output-file":"math-matrix.html"},"language":{},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.3.217","bibliography":["references.bib"],"theme":"spacebar","mermaid":{"theme":"forest"}},"extensions":{"book":{"multiFile":true}}}}}