# Multiple testing

```{r setup, include=FALSE}
library(tidyverse)
library(kableExtra)
```


## Error types

```{r}
kable(matrix(c("", "H0 is true", "H0 is false", "Accept H0", "", "Type II error, miss", "Reject H0", "Type I error, false alarm", ""), byrow=F, ncol=3)) %>% kable_styling(font_size=14)
```

```{r}
kable(matrix(c("", "H0 is true", "H0 is false", "Accept H0", "TN", "FN", "Reject H0", "FP", "TP"), byrow=F, ncol=3)) %>% kable_styling(font_size=14)
```

Significance level

$$P(\mbox{reject }\,H_0 | H_0 \,\mbox{is true}) = P(\mbox{type I error}) = \alpha$$
  
  Statistical power

$$P(\mbox{reject } H_0 | H_1 \mbox{ is true}) = P(\mbox{reject } H_0 | H_0 \mbox{ is false}) = 1 - P(\mbox{type II error})$$
  
  ## Perform one test:
  
  -   P(One type I error) = $\alpha$
  -   P(No type I error) = $1 - \alpha$
  
  ## Perform $m$ independent tests:
  
  -   P(No type I errors in $m$ tests) = $(1 - \alpha)^m$
  -   P(At least one type I error in $m$ tests) = $1 - (1 - \alpha)^m$
  
  ```{r multiple, echo=FALSE, out.width="50%", fig.align="center", fig.width=4, fig.height=4}
a=0.05
k <- 1:100
ggplot(data.frame(k=k, p = 1-(1-a)^k), aes(x=k, y=p)) + geom_line() + xlab("Number of tests") + ylab("P(At least one type I error)") + theme_bw() + annotate("label", x=75, y=0.2, label="alpha == 0.05", parse=TRUE)
```

-   FWER: family-wise error rate, probability of one or more false positive, e.g. Bonferroni, Holm
-   FDR: false discovery rate, proportion of false positives among hits, e.g. Benjamini-Hochberg, Storey

## Bonferroni correction

To achieve a family-wise error rate of $\leq \alpha$ when performing $m$ tests, declare significance and reject the null hypothesis for any test with $p \leq \alpha/m$.

Objections: too conservative

## Benjamini-Hochbergs FDR

```{r}
kable(matrix(c("", "H0 is true", "H0 is false", "Accept H0", "TN", "FN", "Reject H0", "FP", "TP"), byrow=3, ncol=3)) %>% kable_styling(font_size=14)
```

The false discovery rate is the proportion of false positives among 'hits', i.e. $\frac{FP}{TP+FP}$.

Benjamini-Hochberg's method control the FDR level, $\gamma$, when performing $m$ *independent* tests, as follows:

1.  Sort the p-values $p_1 \leq p_2 \leq \dots \leq p_m$.
2.  Find the maximum $j$ such that $p_j \leq \gamma \frac{j}{m}$.
3.  Declare significance for all tests $1, 2, \dots, j$.

## 'Adjusted' p-values

Sometimes an adjusted significance threshold is not reported, but instead 'adjusted' p-values are reported.

-   Using Bonferroni's method the 'adjusted' p-values are:
  
  $\tilde p_i = \min(m p_i, 1)$.

A feature's adjusted p-value represents the smallest FWER at which the null hypothesis will be rejected, i.e. the feature will be deemed significant.

-   Benjamini-Hochberg's 'adjusted' p-values are called $q$-values:
  
  $q_i = \min(\frac{m}{i} p_i, 1)$
  
  A feature's $q$-value can be interpreted as the lowest FDR at which the corresponding null hypothesis will be rejected, i.e. the feature will be deemed significant.

```{example, label="10000", echo=TRUE}
**10000 independent tests (e.g. genes)**
```

```{r padjust, results="asis"}
p <- sort(c(1.7e-8, 5.8e-8, 3.4e-7, 9.1e-7, 1.0e-6, 2.4e-6, 3.6e-5, 2.3e-5, 2.3e-4, 2.2e-4, 8.9e-3,7.3e-4, 0.0045, 0.0032, 0.0087, 0.012, 0.014, 0.045, 0.08, 0.23))
kable(data.frame(`p-value`=sprintf("%.3g", p), `adj p (Bonferroni)` = p.adjust(p, "bonferroni", 10000), `q-value (B-H)`=p.adjust(p, "BH", 10000), check.names=FALSE))
```
