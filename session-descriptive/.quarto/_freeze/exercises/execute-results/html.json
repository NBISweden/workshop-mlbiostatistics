{
  "hash": "a5768c45a3b969ad81b0c74af7f248a8",
  "result": {
    "markdown": "---\noutput: html_document\neditor_options: \n  chunk_output_type: console\n---\n\n# Exercises\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# load libraries\nlibrary(tidyverse)\nlibrary(kableExtra)\nlibrary(ggplot2)\nlibrary(ggbeeswarm)\nlibrary(gridExtra)\n```\n:::\n\n\n\n::: {#exr-diabetes}\n\n## Summarize diabetes data\n\nUse below code to load diabetes data set and calculate `BMI` and add categorical variable `obese` (Yes) if $BMI \\ge 30$ and No otherwise. Summarize variables: obese, age and gender reporting mean and sample standard deviation for numerical variables and counts and percentage per group for categorical variables.\n\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(faraway)\nlibrary(tidyverse)\n\ninch2m <- 2.54/100\npound2kg <- 0.45\ndata_diabetes <- diabetes %>%\n  mutate(height  = height * inch2m, height = round(height, 2)) %>% \n  mutate(waist = waist * inch2m) %>%  \n  mutate(weight = weight * pound2kg, weight = round(weight, 2)) %>%\n  mutate(BMI = weight / height^2, BMI = round(BMI, 2)) %>% \n  mutate(obese= cut(BMI, breaks = c(0, 29.9, 100), labels = c(\"No\", \"Yes\"))) \n```\n:::\n\n\n\n::: {#exr-diabetes-plot}\n\n## Plot diabetes data\n\nTry various plots to visualize diabetes variables: BMI and gender. Start by making a histogram and density plot for BMI and box plot of BMI stratified by gender status. Can you think of any other plots that may be useful here to visualize the relationships between BMI and gender?\n\n:::\n\n## Solutions: Descriptive statistics {-}  \n\n::: {.solution}\n@exr-diabetes\n:::\n\nAge is a numerical variable and we can calculate mean and sample standard deviation for example as below: \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\ndata_diabetes %>%\n  select(age) %>%\n  summarize(age_mean = mean(age, na.rm = T), \n            age_sd = sd(age, na.rm = T)) %>%\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  age_mean   age_sd\n1 46.85112 16.31233\n```\n:::\n:::\n\n\nGender and obesity status are categorical variables and we can calculate counts and percentages per groups as below:\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nsummary_gender <- data_diabetes %>%\n  select(gender) %>%\n  group_by(gender) %>%\n  summarize(n = n()) %>%\n  mutate(percent = n * 100 / nrow(data_diabetes)) %>%\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 2 × 3\n  gender     n percent\n  <fct>  <int>   <dbl>\n1 male     169    41.9\n2 female   234    58.1\n```\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nsummary_obese <- data_diabetes %>%\n  select(obese) %>%\n  group_by(obese) %>%\n  summarize(n = n()) %>%\n  mutate(percent = n * 100 / nrow(data_diabetes)) %>%\n  print()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 3 × 3\n  obese     n percent\n  <fct> <int>   <dbl>\n1 No      253   62.8 \n2 Yes     144   35.7 \n3 <NA>      6    1.49\n```\n:::\n:::\n\n\nAlternatively, we can use one of the many R data summaries packages, for instance `arsenal` to summarize obesity status by age and gender.\n\n::: {.cell messages='false'}\n\n```{.r .cell-code  code-fold=\"false\"}\nlibrary(arsenal)\n\ntab1 <- tableby(obese ~ gender + age, data=data_diabetes)\nsummary(tab1)\n```\n\n\n\n|                            |   No (N=253)    |   Yes (N=144)   |  Total (N=397)  | p value|\n|:---------------------------|:---------------:|:---------------:|:---------------:|-------:|\n|**gender**                  |                 |                 |                 | < 0.001|\n|&nbsp;&nbsp;&nbsp;male      |   128 (50.6%)   |   40 (27.8%)    |   168 (42.3%)   |        |\n|&nbsp;&nbsp;&nbsp;female    |   125 (49.4%)   |   104 (72.2%)   |   229 (57.7%)   |        |\n|**age**                     |                 |                 |                 |   0.734|\n|&nbsp;&nbsp;&nbsp;Mean (SD) | 47.103 (16.745) | 46.521 (15.831) | 46.892 (16.402) |        |\n|&nbsp;&nbsp;&nbsp;Range     | 19.000 - 91.000 | 20.000 - 92.000 | 19.000 - 92.000 |        |\n:::\n\n\n::: {.solution}\n@exr-diabetes-plot\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\nfont.size <- 12\ncol.blue.light <- \"#a6cee3\"\ncol.blue.dark <- \"#1f78b4\"\nmy.ggtheme <- theme(axis.title = element_text(size = font.size), \n        axis.text = element_text(size = font.size), \n        legend.text = element_text(size = font.size), \n        legend.title = element_blank(), \n        legend.position = \"top\", \n        axis.title.y = element_text(angle = 0)) + theme_bw()\n  \nplt_hist <- data_diabetes %>%\n  ggplot(aes(x = BMI)) +\n  geom_histogram() + \n  my.ggtheme\n\nplt_density <- data_diabetes %>%\n  ggplot(aes(x = BMI)) +\n  geom_density() + \n  my.ggtheme\n\nplt_boxplot <- data_diabetes %>%\n  ggplot(aes(x = gender, y = BMI)) + \n  geom_boxplot() + \n  my.ggtheme\n  \n\nplt_hist\n```\n\n::: {.cell-output-display}\n![](exercises_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nplt_density\n```\n\n::: {.cell-output-display}\n![](exercises_files/figure-html/unnamed-chunk-6-2.png){width=672}\n:::\n\n```{.r .cell-code  code-fold=\"false\"}\nplt_boxplot           \n```\n\n::: {.cell-output-display}\n![](exercises_files/figure-html/unnamed-chunk-6-3.png){width=672}\n:::\n:::\n\n\nIn addition, we could for instance try beeswarm plot and/or histogram stratified by gender. Or we can try also overlaying box plots over the jitter plot either for all BMI variables or separately for males and females. Sometimes, it may be also a good idea to plot summary statistics, e.g. a barplot at a height of means and error bars representing standard deviation, error bars or confidence intervals. See this post for inspiration if you'd like to try plotting the summary statistics instead [http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/](http://www.cookbook-r.com/Graphs/Plotting_means_and_error_bars_(ggplot2)/)\n\n\n\n",
    "supporting": [
      "exercises_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}